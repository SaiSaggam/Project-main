angular.module("masterApp", ['ngStorage', 'ui.bootstrap', 'angular-table', 'ngAnimate', 'angularSpinner'])
    .config(['usSpinnerConfigProvider', function(usSpinnerConfigProvider) {
        usSpinnerConfigProvider.setDefaults({ color: '#196ECF' });
    }])
    .run();

angular.module('masterApp').controller('masterCtrl', masterCtrl);
masterCtrl.$inject = ['$scope', '$rootScope', '$uibModal', '$filter', '$sessionStorage', 'TimerService', 'serverGetReqSrv', 'serverPostReqSrv', 'ERROR_MESSAGE'];

function masterCtrl($scope, $rootScope, $uibModal, $filter, $sessionStorage, TimerService, serverGetReqSrv, serverPostReqSrv, ERROR_MESSAGE) {
    var initialLoginTime = $filter('date')(new Date(), 'hh:mma');
    $scope.currentLogin = initialLoginTime;

    $scope.open = function() {
        var modalInstance = $uibModal.open({
            windowClass: 'search-modal',
            templateUrl: '/partials/myModalContent.ejs',
            controller: 'searchFormCtrl',
            backdrop: 'static',
            size: 'lg'
        });
    };

    $scope.toggleOpen = function() {
        $scope.isOpenPanel = !$scope.isOpenPanel;
    }

    $scope.showRiderInfo = function() {
        $scope.isRiderInfo = !$scope.isRiderInfo;
    }
    $scope.showOOPInfo = function() {
        $scope.isOOPInfo = !$scope.isOOPInfo;
    }

    $scope.showMemberInfo = function() {
        $scope.isOpenMemberInfo = !$scope.isOpenMemberInfo;
    }

    $scope.toggleGroupOpen = function() {
        $scope.isGroupOpenPanel = !$scope.isGroupOpenPanel;
    }

    $scope.showGroupInfo = function() {
        $scope.isOpenGroupInfo = !$scope.isOpenGroupInfo;
    }



    $scope.openQuickLinksModal = function(documentType) {
        $rootScope.documentType = angular.copy(documentType);
        var modalInstance = $uibModal.open({
            windowClass: 'quicklinks-data-modal',
            templateUrl: '/partials/quicksLinksDataModal.ejs',
            controller: 'quickLinksCtrl',
            backdrop: 'static',
            size: 'lg'
        });
    }

    $scope.openAdmin = function() {
        $scope.isAdminPage = true;
        // $scope.form = $scope.resQuickLinks;
    };

    $rootScope.$on("memberData", function(event, indv) {
        $scope.isOpenPanel = true;
        $scope.isOpenMemberInfo = true;
        $scope.isRiderInfo = true;
        $scope.isOOPInfo = true;
        $scope.showMemberGrid = true;
        $scope.showGroupGrid = false;
        $scope.showUserName = true;
        $scope.showGroupName = false;
        $scope.indvDetails = indv;
        $scope.indvDetails.birthday = calculateAge($scope.indvDetails.dob);
        $scope.showQuickLinkGroup = false;
        $scope.showQuickLink = true;
    });

    $rootScope.$on('reset', function() {
        $scope.showUserName = false;
        $scope.showGroupName = false;
        $scope.showMemberGrid = false;
        $scope.showGroupGrid = false;
        $scope.showMemberDepedentDetails = false;
        $scope.showQuickLink = false;
    });

    $rootScope.$on("groupData", function(event, grp) {
        $scope.isGroupOpenPanel = true;
        $scope.isOpenGroupInfo = true;
        $scope.isRiderGroupInfo = true;
        $scope.isOOPInfo = true;
        $scope.showMemberGrid = false;
        $scope.showGroupGrid = true;
        $scope.showUserName = false;
        $scope.showGroupName = true;
        $scope.grpDetails = grp;
        $scope.showQuickLink = false;
        $scope.showQuickLinkGroup = true;
    });

  $rootScope.$on("getMemberFamilyDetails", function(event, memDetails){
    getMemberFamilyDetails(memDetails);
  });
  function getMemberFamilyDetails(memDetails) {
      var memberFamilyReqObj = {
              "surrogateKey": "",
              "groupNo": "",
              "effectiveDate": ""
          }
          // name of the service

      var memberFamilyServiceName = "member/getMemberFamily";
      $scope.showMemberDepedentSpinner = true;
      memberFamilyReqObj.surrogateKey = memDetails.surrogateKey;
      memberFamilyReqObj.groupNo = memDetails.groupNo;
      memberFamilyReqObj.effectiveDate = memDetails.startDate;
      TimerService.init();
      $scope.showMemberDepedentDetails = true;
      serverPostReqSrv.send(memberFamilyServiceName, memberFamilyReqObj).async().then(function(d) {
        TimerService.log('Get member family response got in');
          $scope.familyError = false;
          $scope.showMemberDepedentSpinner = false;

          $scope.memberDepedentDetails = d.memberFamily;
      }).catch(function(err) {
          $scope.familyInfoErr = ERROR_MESSAGE.getMemberFamily[err.status];
          $scope.showMemberDepedentSpinner = false;
          $scope.familyError = true;
      });
  }

    $scope.getMembershipForDependents = function(individual) {
        $scope.indvDetails = individual;
        $scope.indvDetails.birthday = calculateAge($scope.indvDetails.dob);
        $scope.showMemberDepedentDetails = false;
        $rootScope.$emit("getMembershipForDependents", individual);
    }

    function init() {
        $scope.isOpenPanel = true;
        $scope.isOpenMemberInfo = true;
        $scope.showMemberDepedentDetails = false;
        $scope.isOOPInfo = true;
        $scope.isRiderInfo = true;
        $scope.isGroupOpenPanel = true;
        $scope.isOpenGroupInfo = true;
        $scope.isRiderGroupInfo = true;
        $scope.isOOPInfo = true;

        getQuickLinksData();
        $scope.isAdminPage = false;
        // $sessionStorage.$reset();
        $scope.open();


    }

    init();

    $scope.retrieveUserRole = function(userInfo) {
        userInfo = JSON.parse(userInfo);
        $scope.isAdminRole = userInfo.userRole.isAdmin;
        $sessionStorage.isMemberRole = userInfo.userRole.isMember;
        $rootScope.userInfo = userInfo;
    }

    $scope.retrieveQueryGroupInfo = function(grpInfo){
      $rootScope.grpInfo = JSON.parse(grpInfo);

    }

    $scope.closeAdminPage = function() {
        // getQuickLinksData();
        $scope.isAdminPage = false;
    }

    function getQuickLinksData() {
        serverGetReqSrv.send("quicklinks/getQuickLinks").async().then(function(d) {
            $scope.resQuickLinks = d.links;
            $scope.form = d;
            $scope.restObj = angular.copy($scope.form);
        }, function(err) {
            console.log("Error got at getData");
        });
    }

    function calculateAge(dob) {
        var ageDifMs = Date.now() - new Date(dob);
        var ageDate = new Date(ageDifMs);
        return Math.abs(ageDate.getUTCFullYear() - 1970);
    }

}

angular.module('masterApp').controller('searchFormCtrl', searchFormCtrl);
searchFormCtrl.$inject = ['$scope', '$rootScope', '$sessionStorage', 'serverPostReqSrv', 'TimerService', '$filter', 'US_STATES', 'ERROR_MESSAGE'];

function searchFormCtrl($scope, $rootScope, $sessionStorage, serverPostReqSrv, TimerService, $filter, US_STATES, ERROR_MESSAGE) {

    $scope.showSearchForm = true;
    $scope.searchErrMsg = ERROR_MESSAGE.formErrorMsg;
    $scope.isMemberRole = $sessionStorage.isMemberRole;

    var groupSearchJson = {
        "groupNo": "",
        "groupName": "",
        "state": ""
    };


    $scope.accessMemberTab = function() {
        if (!$scope.isMemberRole) {
            return 'disabledTab';
        }
        return '';
    }
    $scope.grpDropdownValue = function(grpSearchType) {
        $scope.grpSearchType = grpSearchType;
        $sessionStorage.grpSearchType = grpSearchType;
        if ($scope.grpSearchType === 'groupName') {
            $scope.isGroupNoSearch = false;
        } else {
            $scope.isGroupNoSearch = true;
        }

        $sessionStorage.isGroupNoSearch = $scope.isGroupNoSearch;
    }
    $scope.dropdownValue = function(searchType) {
        $scope.searchType = searchType;
        $sessionStorage.searchType = searchType;
        if ($scope.searchType === 'name') {
            $scope.isMemberIdSearch = false;
        } else {
            $scope.isMemberIdSearch = true;
        }
        $sessionStorage.isMemberIdSearch = $scope.isMemberIdSearch;

    }

    $scope.isActive = function(searchWith) {
        if (searchWith === $scope.searchBy) {
            return 'active';
        }
        return '';
    }

    $scope.setActiveData = function(searchVar) {
        $scope.searchBy = searchVar;
        $sessionStorage.searchBy = $scope.searchBy;
    }

    function init() {
        $scope.value = "memberId";
        $scope.val = "groupNo";
        $scope.showErrorMsg = false;
        $scope.showGrpErrorMsg = false;
        $scope.isMemberIdSearch = true;
        $scope.isGroupNoSearch = true;
        $scope.showMemberGrid = false;
        $scope.showGroupGrid = false;
        $scope.showMemberResults = false;
        $scope.showPlanResults = false;
        $scope.showSpinner = false;
        $scope.req = {};
        $sessionStorage.searchData = {};
        $sessionStorage.groupSearchData = {};
        $scope.groupReq = {};
        $scope.searchBy = 'member';
        $scope.dropdownValue($scope.value);
        $scope.grpDropdownValue($scope.val);
        if (!$scope.isMemberRole) {
            $scope.searchBy = 'group';
        }
        if (!_.isUndefined($sessionStorage.memRecentSearch)) {
            $scope.recMemSearches = JSON.parse($sessionStorage.memRecentSearch);
        }
        if (!_.isUndefined($sessionStorage.groupRecentSearch)) {
            $scope.recGroupSearches = JSON.parse($sessionStorage.groupRecentSearch);
        }
    }

    function retrieveModalState() {
        $scope.value = $sessionStorage.searchType;
        $scope.val = $sessionStorage.grpSearchType;
        $scope.searchType = $sessionStorage.searchType;
        $scope.grpSearchType = $sessionStorage.grpSearchType;
        $scope.isMemberIdSearch = $sessionStorage.isMemberIdSearch;
        $scope.isGroupNoSearch = $sessionStorage.isGroupNoSearch;
        $scope.searchBy = $sessionStorage.searchBy;
        $scope.resultsType = $sessionStorage.resultsType;
        $scope.req = $sessionStorage.searchData;
        $scope.groupReq = $sessionStorage.groupSearchData;
        if ($sessionStorage.resSearch) {
            $scope.resSearch = $sessionStorage.resSearch;
            $scope.showMemberResults = true;
        }
        if ($sessionStorage.groupSearch) {
            $scope.groupSearch = $sessionStorage.groupSearch;
            $scope.showPlanResults = true;
        }
        if (!_.isUndefined($sessionStorage.memRecentSearch)) {
            $scope.recMemSearches = JSON.parse($sessionStorage.memRecentSearch);
        }
        if (!_.isUndefined($sessionStorage.groupRecentSearch)) {
            $scope.recGroupSearches = JSON.parse($sessionStorage.groupRecentSearch);
        }
    }

    if ($rootScope.saveState) {
        retrieveModalState();
    } else {
        init();

    }

    function clearData(param) {
        if (param === 'member') {
            $scope.req = {};
            $sessionStorage.searchData = {};
            $scope.resSearch = '';
            $sessionStorage.resSearch = '';
            $scope.showErrorMsg = false;
        } else if (param === 'group') {
            $scope.groupReq = {};
            $sessionStorage.groupSearchData = {};
            $scope.groupSearch = '';
            $sessionStorage.groupSearch = '';
            $scope.showGrpErrorMsg = false;

        }
    }

    $scope.resetForm = function() {
        $scope.showErrorMsg = false;
        $scope.showGrpErrorMsg = false;
        $scope.hasMoreResults = false;
        $scope.showMemberResults = false;
        $scope.showPlanResults = false;
        $scope.showSpinner = false;
        clearData('member');
        clearData('group');
    }

    $scope.stateData = US_STATES.usState;

    $scope.closeModal = function() {
            $scope.$close();
        }
        // validating user given search criteria
    function isValid(input, type) {
        if (_.isNull(input) || _.isUndefined(input) || input === '') {
            return false;
        }
        if (type === 'text') {
            return !(/\d/.test(input));
        } else if (type === 'no') {
            return !isNaN(input);
        } else if (type === 'zip') {
            return !isNaN(input) && (input.length == 5);
        } else if (type === 'date') {
            return _.isDate(input);
        }
        return true;
    }

    function getValidDates(startDate, stopDate) {
        var today = new Date();
        if (isValid(startDate, 'date') && !isValid(stopDate, 'date')) {
            stopDate = new Date('12/31/9999');
        } else if (isValid(stopDate, 'date') && !isValid(startDate)) {
            startDate = new Date((stopDate.getUTCFullYear() - 2), stopDate.getMonth(), stopDate.getDate());
            if (startDate.getTime() > today.getTime()) {
                startDate = today;
            }
        } else if (!isValid(startDate) && !isValid(stopDate)) {
            stopDate = today;
            startDate = new Date((today.getUTCFullYear() - 2), today.getMonth(), today.getDate());
        } else if (!isValid(startDate, 'date') || !isValid(stopDate, 'date')) {
            $scope.showErrorMsg = true;
            $scope.showGrpErrorMsg = true;
            $scope.searchErrMsg = "Invalid Date format Entered, Please enter date format in 'MM-dd-yyyy'";
            return false;
        } else {
            if (startDate.getTime() > stopDate.getTime()) {
                $scope.showErrorMsg = true;
                $scope.showGrpErrorMsg = true;
                $scope.searchErrMsg = "Coverage End Date should be ahead of Coverage Start Date";
                return false;
            }

        }
        return {
            startDate: startDate,
            stopDate: stopDate
        };
    }

    $scope.submitMemberReq = function() {
        $scope.searchBy = 'member';
        $sessionStorage.searchBy = $scope.searchBy;
        $sessionStorage.searchData = $scope.req;
        $sessionStorage.resSearch = '';
        $scope.showMemberResults = false;
        $rootScope.saveState = true;
        $scope.showErrorMsg = false;
        $scope.showGrpErrorMsg = false;
        $scope.searchErrMsg = ERROR_MESSAGE.formErrorMsg;
        $scope.hasMoreResults = false;
        if ($scope.req == null) {
            $scope.showErrorMsg = true;
        } else {
            if ($scope.searchType === 'name') {
                if (isValid($scope.req.lastName, 'text') && (isValid($scope.req.zipCode, 'zip') || isValid($scope.req.state, 'text'))) {

                    $scope.req.memberId = '';
                    $scope.req.memberIdStartDate = '';
                    $scope.req.memberIdStopDate = '';
                    var validDates = getValidDates($scope.req.nameStartDate, $scope.req.nameStopDate);
                    if (validDates) {
                        $scope.req.nameStartDate = validDates.startDate;
                        $scope.req.nameStopDate = validDates.stopDate;
                        $rootScope.userInfo.memberId = undefined;
                        getMemberData($scope.req);
                    }
                } else {
                    if (!isValid($scope.req.lastName, 'text')) {
                        $scope.lastNameError = true;
                    }
                    if (!(isValid($scope.req.zipCode, 'zip') || isValid($scope.req.state, 'text'))) {
                        $scope.zipOrState = true;
                    }
                    $scope.showErrorMsg = true;
                }
            } else {
                if (isValid($scope.req.memberId, 'no')) {
                    var validDates = getValidDates($scope.req.memberIdStartDate, $scope.req.memberIdStopDate);
                    if (validDates) {
                        $scope.req = { 'memberId': $scope.req.memberId };
                        $scope.req.memberIdStartDate = validDates.startDate;
                        $scope.req.memberIdStopDate = validDates.stopDate;
                        $rootScope.userInfo.memberId = $scope.req.memberId;
                        getMemberData($scope.req);
                    }
                } else {
                    $scope.memberIdError = true;
                    $scope.showErrorMsg = true;

                }
            }
        }
    }


    function getMemberData(req) {
        $sessionStorage.searchData = req;
        $scope.showErrorMsg = false;
        $rootScope.userInfo.groupId = undefined;
        var memberSearchServName = "member/findIndividual";
        $scope.showSpinner = true;
        $scope.startDate = getSearchTypeData($scope.searchType).startDate;
        $scope.stopDate = getSearchTypeData($scope.searchType).stopDate;
        TimerService.init();
        $rootScope.$emit('reset');
        serverPostReqSrv.send(memberSearchServName, req).async().then(function(d) {
            TimerService.log('Find Individual Response Got in');
            $scope.hasMoreResults = d.hasMoreResults;
            if (d.hasMoreResults) {
                $scope.searchErrMsg = ERROR_MESSAGE.moreResult;
            }
            $scope.resultsType = $scope.searchType;
            $sessionStorage.resultsType = $scope.resultsType;
            $scope.resSearch = d.individual;
            $sessionStorage.resSearch = d.individual;
            $scope.showMemberResults = true;
            $scope.showSpinner = false;
            if ($scope.resSearch.length === 1) {
                $scope.memberSubmit($scope.resSearch[0]);
                $scope.closeModal();
            }
        }).catch(function(err) {
            $scope.searchErrMsg = ERROR_MESSAGE.findIndividual[err.status];
            $scope.showMemberResults = false;
            $scope.showErrorMsg = true;
            $scope.showSpinner = false;
        });
        $scope.showErrorMsg = false;
    }

    function updateDateFormat(date) {
        var formattedDate = $filter('date')(date, 'yyyy-MM-dd');
        return formattedDate;
    }


    $scope.memberSubmit = function(indv) {
        if ($scope.searchBy === 'recent') {
            clearData('member');
            clearData('group');
        }
        $scope.searchBy = 'member';
        $sessionStorage.searchBy = $scope.searchBy;
        $rootScope.saveState = true;
        clearData('group');
        if (!indv.startDate && !indv.stopDate) {
            indv.startDate = updateDateFormat($scope.startDate);
            indv.stopDate = updateDateFormat($scope.stopDate);
        }
        $rootScope.userInfo.memberId = indv.memberId.id;
        $rootScope.userInfo.groupId = undefined;
        $rootScope.$emit("memberData", indv);
        if (_.isUndefined($sessionStorage.memRecentSearch)) {
            var memrRecArr = [];
        } else {
            var memrRecArr = JSON.parse($sessionStorage.memRecentSearch);
        }
        for (var i = 0; i < memrRecArr.length; i++) {
            if (memrRecArr[i].individualId == indv.individualId) {
                memrRecArr.splice(i, 1);
            }
        }
        memrRecArr.push(indv);
        if (memrRecArr.length > 10) {
            memrRecArr.shift();
        }
        $sessionStorage.memRecentSearch = angular.copy(JSON.stringify(memrRecArr));
        $scope.recMemSearches = JSON.parse($sessionStorage.memRecentSearch);
    }

    $scope.submitGroupReq = function() {
        $scope.searchBy = 'group';
        $sessionStorage.searchBy = $scope.searchBy;
        $sessionStorage.groupSearchData = $scope.groupReq;
        $sessionStorage.groupSearch = '';
        $rootScope.saveState = true;
        $scope.showPlanResults = false;
        $scope.showErrorMsg = false;
        $scope.showGrpErrorMsg = false;
        $scope.searchErrMsg = ERROR_MESSAGE.formErrorMsg;
        $scope.hasMoreResults = false;
        if ($scope.groupReq == null) {
            $scope.showGrpErrorMsg = true;
        } else {

            if ($scope.grpSearchType === 'groupName') {
                if (isValid($scope.groupReq.groupName) && isValid($scope.groupReq.state, 'text')) {
                    $scope.groupReq.groupNo = '';
                    $scope.groupReq.groupStartDate = '';
                    $scope.groupReq.groupStopDate = '';
                    $scope.groupReq.groupNoBboid = '';
                    var validDates = getValidDates($scope.groupReq.gNameStartDate, $scope.groupReq.gNameStopDate);
                    if (validDates) {
                        $scope.groupReq.gNameStartDate = validDates.startDate;
                        $scope.groupReq.gNameStopDate = validDates.stopDate;
                        $rootScope.userInfo.groupId = undefined;
                        getGroupData($scope.groupReq);
                    }

                    // getGroupData($scope.groupReq);
                } else {
                    if (!isValid($scope.groupReq.state, 'text')) {
                        $scope.noState = true;
                    }
                    if (!isValid($scope.groupReq.groupName)) {
                        $scope.groupNameError = true;
                    }
                    $scope.showGrpErrorMsg = true;
                    // $sessionStorage.showGrpErrorMsg = $scope.showGrpErrorMsg;
                }
            } else {
                if (isValid($scope.groupReq.groupNo, 'no')) {
                    var validDates = getValidDates($scope.groupReq.groupStartDate, $scope.groupReq.groupStopDate);
                    if (validDates) {
                        $scope.groupReq = { 'groupNo': $scope.groupReq.groupNo, 'groupNoBboid' : $scope.groupReq.groupNoBboid};
                        $scope.groupReq.groupStartDate = validDates.startDate;
                        $scope.groupReq.groupStopDate = validDates.stopDate;
                        $rootScope.userInfo.groupId = $scope.groupReq.groupNo;
                        getGroupData($scope.groupReq);
                    }
                    // getGroupData($scope.groupReq);
                } else {
                    $scope.groupNoError = true;
                    $scope.showGrpErrorMsg = true;
                    // $sessionStorage.showGrpErrorMsg = $scope.showGrpErrorMsg;

                }
            }

        }
    }

    function getGroupData(groupReq) {
        $sessionStorage.groupSearchData = groupReq;
        $scope.showGrpErrorMsg = false;
        $rootScope.userInfo.memberId = undefined;
        var groupSearchServName = "group/findEmployerGroup";
        $scope.showSpinner = true;
        $scope.grpStartDate = getSearchTypeData($scope.grpSearchType).startDate;
        $scope.grpStopDate = getSearchTypeData($scope.grpSearchType).stopDate;
        $scope.benefitBundleOptionId = getSearchTypeData($scope.grpSearchType).benefitBundleOptionId;
        TimerService.init();
        $rootScope.$emit('reset');
        serverPostReqSrv.send(groupSearchServName, groupReq).async().then(function(d) {
            TimerService.log('Find Employer Group Response Got in');
            $scope.groupResultsType = $scope.groupSearchType;
            $sessionStorage.groupResultsType = $scope.groupResultsType;
            $scope.groupSearch = d.groups;
            $sessionStorage.groupSearch = d.groups;
            if ($scope.groupSearch.length === 1) {
                $scope.groupSubmit($scope.groupSearch[0]);
                $scope.closeModal();
            }
            $scope.showPlanResults = true;
            $scope.showSpinner = false;

        }).catch(function(err) {
            $scope.searchErrMsg = ERROR_MESSAGE.findEmployerGroup[err.status];
            $scope.showPlanResults = false;
            $scope.showSpinner = false;
            $scope.showGrpErrorMsg = true;
        });
    }

    $scope.groupSubmit = function(grp) {
        if ($scope.searchBy === 'recent') {
            clearData('member');
            clearData('group');
        }
        $scope.searchBy = 'group';
        $sessionStorage.searchBy = $scope.searchBy;
        $rootScope.saveState = true;
        clearData('member');
        if (!grp.startDate && !grp.stopDate) {
            grp.startDate = updateDateFormat($scope.grpStartDate);
            grp.stopDate = updateDateFormat($scope.grpStopDate);
        }
        if(!grp.benefitBundleOptionId){
          grp.benefitBundleOptionId = $scope.benefitBundleOptionId;
        }
        $rootScope.userInfo.memberId = undefined;
        $rootScope.userInfo.groupId = grp.groupNo;
        $rootScope.$emit("groupData", grp);
        if (_.isUndefined($sessionStorage.groupRecentSearch)) {
            var groupRecArr = [];
        } else {
            var groupRecArr = JSON.parse($sessionStorage.groupRecentSearch);
        }
        for (var j = 0; j < groupRecArr.length; j++) {
            if (groupRecArr[j].groupNo == grp.groupNo) {
                groupRecArr.splice(j, 1);
            }
        }
        groupRecArr.push(grp);
        if (groupRecArr.length > 10) {
            groupRecArr.shift();
        }
        $sessionStorage.groupRecentSearch = JSON.stringify(groupRecArr);
    }

    if(!_.isEmpty($rootScope.grpInfo) && !$scope.saveState){
      $scope.groupReq = $rootScope.grpInfo;
      $scope.submitGroupReq();
    }
    //Sorting
    $scope.sort = {
        active: '',
        descending: undefined
    }

    $scope.changeSorting = function(column) {
        var sort = $scope.sort;
        if (sort.active == column) {
            sort.descending = !sort.descending;
        } else {
            sort.active = column;
            sort.descending = false;
        }
    };

    $scope.getIcon = function(column) {
        var sort = $scope.sort;
        if (sort.active == column) {
            return sort.descending ? 'fa fa-caret-down' : 'fa fa-caret-up';
        }
        return 'fa fa-sort';
    }

    /*****************                  Please Dont Change             ********************/

    // Configuration for all date picker instances
    //KEEP
    function getFutureDate(date) {
        if (isValid(date) && _.isDate(date)) {
            date.setDate(date.getDate() + 1);
            return date;
        }
    }

    $scope.formats = ['dd-MMMM-yyyy', 'yyyy/MM/dd', 'dd.MM.yyyy', 'shortDate', 'MM-dd-yyyy'];
    $scope.format = $scope.formats[4];
    // Date of Birth Config
    $scope.memberDOBDateOps = {
        dateDisabled: false,
        formatYear: 'yyyy',
        startingDay: 1,
        showWeeks: false
    };

    $scope.openMemberDOBDate = function() {
        $scope.memberDOBPopup.opened = true;
        // var memberStartDate = angular.copy($scope.req.startDate);
    };

    $scope.memberDOBPopup = {
        opened: false
    };

    $scope.modelOptions = {
        allowInvalid: true
    };
    $scope.startDateOps = {
        dateDisabled: false,
        formatYear: 'yyyy',
        minDate: new Date(1990, 5, 22),
        startingDay: 1,
        showWeeks: false
    };

    $scope.openStartDate = function() {
        $scope.startDatePopup.opened = true;
    };

    $scope.startDatePopup = {
        opened: false
    };


    // MemberId Stop Date Config
    //Our code make changes accordingly

    function getSearchTypeData(type) {
        var dateObject = {
            memberId: {
                'startDate': $scope.req.memberIdStartDate,
                'stopDate': $scope.req.memberIdStopDate
            },
            name: {
                startDate: $scope.req.nameStartDate,
                stopDate: $scope.req.nameStopDate
            },
            groupNo: {
                startDate: $scope.groupReq.groupStartDate,
                stopDate: $scope.groupReq.groupStopDate,
                benefitBundleOptionId: $scope.groupReq.groupNoBboid

            },
            groupName: {
                startDate: $scope.groupReq.gNameStartDate,
                stopDate: $scope.groupReq.gNameStopDate,
                benefitBundleOptionId: $scope.groupReq.groupNameBboid
            }
        };
        return dateObject[type];
    }

    $scope.endDateOps = {
        dateDisabled: false,
        formatYear: 'yyyy',
        startingDay: 1,
        showWeeks: false
    };

    $scope.openEndDate = function(type) {
        $scope.endDatePopup.opened = true;
        var startDate = getSearchTypeData(type).startDate;
        $scope.endDateOps.minDate = getFutureDate(startDate);
    };

    $scope.endDatePopup = {
        opened: false
    };


    $scope.callingFutureDate = function() {
        var groupStartDate = angular.copy($scope.futureDate);
        getFutureDate(groupStartDate);
        retrieveModalState();
    }

    /***************** End of Date Picker From and to Date End ********************/

};

angular.module('masterApp').controller('memberResultCtrl', memberResultCtrl);
memberResultCtrl.$inject = ['$scope', '$rootScope', 'serverPostReqSrv', 'serverGetReqSrv', 'TimerService', 'ERROR_MESSAGE'];

function memberResultCtrl($scope, $rootScope, serverPostReqSrv, serverGetReqSrv, TimerService, ERROR_MESSAGE) {


    $rootScope.$on("memberData", function(event, indv) {
        $scope.isMemberSearch = true;
        $scope.isGroupSearch = false;
        $scope.surrogateKey = _.get(indv, 'surrogateKey');
        getCoverageInformation(indv);
    });

    $rootScope.$on("getMembershipForDependents", function(event, individual) {
        // init();
        getCoverageInformation(individual);
    });

    $rootScope.$on('reset', function() {
        $scope.showMembership = false;

    });

    $rootScope.$on("groupData", function(event, grp) {
        $scope.isMemberSearch = false;
        $scope.isGroupSearch = true;
        getGroupCoverageInformation(grp);
    });

    function extendContract(contract, req) {
        var result = {};
        for (var key in contract) {
            for (var i in req) {
                if (key == i) {
                    result[key] = req[i];
                }
            }
        }
        return result;
    }


    function getCoverageInformation(req) {
        initializeServiceCall();
        $scope.showMembership = true;
        $scope.beachSpinner = true;
        var serverBackendCall = "member/findMembership";

        var membershipJsonContract = {
            "surrogateKey": "",
            "startDate": "",
            "stopDate": ""
        };
        var userReq = extendContract(membershipJsonContract, req);
        TimerService.init();
        console.log('Coverage Information Request Obj', JSON.stringify(userReq));
        serverPostReqSrv.send(serverBackendCall, userReq).async().then(function(d) {
            TimerService.log('Find membership Response got in');
            console.log('Coverage Information Response Obj', JSON.stringify(d));
            $scope.beachSpinner = false;
            $scope.membershipRes = d.memberships;
            $scope.submitCoverageType($scope.membershipRes[0], 0);

        }).catch(function(err) {
            $scope.beachSpinner = false;
            $scope.coverageInfoErr = ERROR_MESSAGE.findMembership[err.status];
            $scope.showCoverageInfoError = true;
        });
    };

    $scope.submitCoverageType = function(memDetails, index) {
        initializeServiceCall('submit');
        $scope.beachSpinner = true;
        $scope.selectedRow = index;
        $scope.selectedItem = memDetails;
        //getting memeber Realtion details
        $rootScope.$emit('getMemberFamilyDetails', memDetails);
        if (memDetails.systemCode === 'CR') {
            var serverBackendCall = "member/getMembership";
            var getMemJsonContract = {
                "surrogateKey": "",
                "groupNo": ""
            };
            var userGetReq = extendContract(getMemJsonContract, memDetails);
            TimerService.init();
            console.log('Coverage Type Req', JSON.stringify(userGetReq));
            serverPostReqSrv.send(serverBackendCall, userGetReq).async().then(function(d) {
                TimerService.log('Get membership Response got in');
                console.log('Coverage Type Response', JSON.stringify(d));
                $scope.showPanels = true;
                $scope.getMemRes = d;
                $scope.getMemRes.surrogateKey = memDetails.surrogateKey;
                getSubscriptionServiceBenefit($scope.getMemRes);
                getDeductiblesOOPS($scope.getMemRes);
                getBenefitLanguageData($scope.getMemRes);
            }).catch(function(err) {
                $scope.beachSpinner = false;
                $scope.memberInfoErr = ERROR_MESSAGE.getMembership[err.status];
                $scope.getMembershipErr = true;
                $scope.showPanels = false;
            });
        }
    };


    function getGroupCoverageInformation(grp) {
        initializeServiceCall();
        $scope.showMembership = true;
        $scope.beachSpinner = true;

        var groupSearchJson = {
            "groupNo": "",
            "benefitBundleOptionId": "",
            "startDate": "",
            "stopDate": ""
        };
        var userReq = extendContract(groupSearchJson, grp);
        var groupSearchServiceName = "group/getEmployerGroup";
        TimerService.init();
        serverPostReqSrv.send(groupSearchServiceName, userReq).async().then(function(d) {
            TimerService.log('Get Employer Group Response Got in');
            $scope.groupRes = d;
            $scope.grpDetails.employeeCounts = d.employeeCount;
            $scope.beachSpinner = false;
            $scope.submitGroupCoverageType($scope.groupRes.benefitBundles[0], 0);
        }).catch(function(err) {
            $scope.beachSpinner = false;
            $scope.GroupCoverageInfoError = ERROR_MESSAGE.getEmployerGroup[err.status];
            $scope.showGroupCoverageInfoErr = true;
        });
        //getBenefitLanguageData(grp);
    };

    $scope.submitGroupCoverageType = function(grpCoverage, index) {
        initializeServiceCall('submit');
        $scope.beachSpinner = true;
        $scope.grpRiderLoading = true;
        $scope.selectedRow = index;
        $scope.selectedItem = grpCoverage;
        $scope.showPanels = true;
        getSubscriptionServiceBenefit(grpCoverage);
        getBenefitLanguageData(grpCoverage);
    };

    function getSubscriptionServiceBenefit(coverageDetails) {
        $scope.deducatableOOPLoading = true;
        $scope.memRiderLoading = true;
        var coverageOverViewServiceName = "member/getSubscriptionServiceBenefit";
        var coverageOverViewReqObj = {
            "benefitBundleOptionId": "",
            "startDate": "",
            "stopDate": ""
        };
        var userReq = extendContract(coverageOverViewReqObj, coverageDetails);
        // userReq.benefitBundleOptionId = '35567894';
        TimerService.init();
        serverPostReqSrv.send(coverageOverViewServiceName, userReq).async().then(function(d) {
            TimerService.log('Get subscription service benefit response got in');
            $scope.riderData = d;
            $scope.memRiderLoading = false;
            $scope.deducatableOOPLoading = false;
            stopSpinner();

        }).catch(function(err) {
            $scope.riderInfoErr = ERROR_MESSAGE.getSubscriptionServiceBenefit[err.status];
            $scope.memRiderLoading = false;
            $scope.riderError = true;
            $scope.deducatableOOPLoading = false;
            if($scope.isGroupSearch){
              $scope.deducatableOOPErrInfo = ERROR_MESSAGE.getSubscriptionServiceBenefit[err.status];
              $scope.deducatableOOPErr = true;
            }
            stopSpinner();
        });
    }

    function getDeductiblesOOPS(coverageDetails) {
        $scope.deducatableOOPLoading = true;
        var surrogateKey = angular.copy($scope.surrogateKey);
        var deductableOOPsReqName = "member/getBenefitAccumulator";
        var deductableOOPsReqObj = {
            "benefitBundleOptionId": "",
            "surrogateKey": "",
            "startDate": "",
            "stopDate": ""

        };
        var userReq = extendContract(deductableOOPsReqObj, coverageDetails);
        TimerService.init();
        serverPostReqSrv.send(deductableOOPsReqName, userReq).async().then(function(d) {
            TimerService.log('Get subscription service benefit response got in');
            $scope.deducatableOOPData = d;
            $scope.deducatableOOPLoading = false;
            stopSpinner();

        }).catch(function(err) {
            $scope.deducatableOOPErrInfo = ERROR_MESSAGE.getBenefitAccumulator[err.status];
            $scope.deducatableOOPLoading = false;
            $scope.deducatableOOPErr = true;
            stopSpinner();
        });
    }

    function getBenefitLanguageData(coverageInfo) {
        $scope.benifitLangLoading = true;
        var langReqName = "member/getBenefitLanguage";
        var languageReqObj = {
            "benefitBundleOptionId": "",
            "startDate": "",
            "stopDate": ""
        };

        var userReq = extendContract(languageReqObj, coverageInfo);
        TimerService.init();
        serverPostReqSrv.send(langReqName, userReq).async().then(function(d) {
            TimerService.log('Language Response got in');
            $scope.benefitLangReq = d;
            $scope.benifitLangLoading = false;
            stopSpinner();
            getDisabledLetter(d.benefits);


        }).catch(function(err) {
            $scope.benefitInfoError = ERROR_MESSAGE.getBenefitLanguage[err.status];
            $scope.benefitError = true;
            $scope.benifitLangLoading = false;
            stopSpinner();
        });
    }

    function stopSpinner() {
        if (!$scope.benifitLangLoading && !$scope.memRiderLoading) {
            $scope.beachSpinner = false;
        }
    }

    function initializeServiceCall(flag) {
        $scope.showPanels = false;
        if (!flag) {
            //findMembership (coverageInformation)
            $scope.membershipRes = null;
            $scope.groupRes = null;
            //getEmployerGroup (getGroupCoverageInformation)
            $scope.showCoverageInfoError = false;
            $scope.showGroupCoverageInfoErr = false;
        }
        //getMembership (submitCoverageType)
        $scope.getMemRes = null;
        $scope.getMembershipErr = false;
        //getSubscriptionServiceBenefit (getSubscriptionServiceBenefit)
        $scope.riderData = null;
        $scope.riderError = false;
        // get Accumulators
        $scope.deducatableOOPData = null;
        $scope.deducatableOOPErr = false;
        //getBenefitLanguage (getBenefitLanguageData)
        $scope.benefitLangReq = null;
        $scope.benefitError = false;
    }

    $scope.oneAtATime = true;

    var str = "abcdefghijklmnopqrstuvwxyz";
    $scope.alphabet = str.toUpperCase().split("");

    $scope.activeLetter = '';

    $scope.activateLetter = function(letter) {
        $scope.activeLetter = letter;

        // $scope.showspan = true;
    }

    $scope.returnActive = function(letter) {
        if ($scope.activeLetter == letter) {
            return {
                style: 'border-active',
                bool: true
            };
        }
        return false;
    }
    $scope.emptyLetters = [];

    getDisabledLetter = function(benefitReq) {
        for (var i = 0; i < $scope.alphabet.length; i++) {
            var letter = $scope.alphabet[i];
            var letterMatch = new RegExp(letter, 'i');
            for (var j = 0; j < benefitReq.length; j++) {
                if (letterMatch.test(benefitReq[j].benefitName.substring(0, 1))) {
                    break;
                } else if (j === (benefitReq.length - 1)) {
                    $scope.emptyLetters.push(letter);
                }
            }
            $scope.benifitLangLoading = false;


        }
    }

    $scope.isDisabled = function(l) {
        for (var i = 0; i < $scope.emptyLetters.length; i++) {
            if (l === $scope.emptyLetters[i]) {
                return {
                    toggle: 'enable',
                    boolean: true
                };
            }
        }
        // $scope.colorClass = "disable"; //#D7D7D7
        return {
            toggle: 'disable',
            boolean: false
        };
    }

};

angular.module('masterApp').filter('startsWithLetter', function() {
    return function(items, letter) {
        var filtered = [];
        var letterMatch = new RegExp(letter, 'i');
        if (items != null) {
            for (var i = 0; i < items.length; i++) {
                var item = items[i];
                if (letterMatch.test(item.benefitName.substring(0, 1))) {
                    filtered.push(item);
                }
            }
        }
        return filtered;
    };
});

angular.module('masterApp').controller('quickLinksCtrl', quickLinksCtrl);
quickLinksCtrl.$inject = ['$scope', '$rootScope', '$filter', 'serverPostReqSrv', 'TimerService', 'serverGetReqSrv', '$window'];

function quickLinksCtrl($scope, $rootScope, $filter, serverPostReqSrv, TimerService, serverGetReqSrv, $window) {

    var initialLoginTime = $filter('date')(new Date(), 'hh:mma');
    $scope.currentLogin = angular.copy(initialLoginTime);
    var init = function() {
        // check if there is query in url
        // and fire search in case its value is not empty
        getQUickLinksInformation();
        $scope.pageStart = 1;
        $scope.pageEnd = 10;
    };
    init();
    $scope.config = {
        itemsPerPage: 10,
        fillLastPage: true,
        maxPages: 5
    }
    $scope.closeModal = function() {
        $scope.$close();
    }

    $scope.pageNumber = function(pageSize) {
        var docLength = angular.copy($scope.documentDetails.document.length);
        $scope.pageStart = getPageStartNumber(pageSize);
        $scope.pageEnd = getPageEndNumber(pageSize, docLength);
    }

    function getPageEndNumber(pageNumber, totalLength) {
        var endPageNum = (pageNumber * 10) + 10;
        if (endPageNum >= totalLength) {
            endPageNum = totalLength;
        }
        return endPageNum;
    }

    function getPageStartNumber(pageNumber) {
        var startPageNum = (pageNumber * 11) - pageNumber + 1;
        return startPageNum;
    }

    function getQUickLinksInformation() {
        var selectedDocType = '';
        if (!angular.isUndefined($rootScope.documentType)) {
            selectedDocType = angular.copy($rootScope.documentType);
        }
        var finalDocList = []
        var quickLinksDocData = { "documentList": [{ "documentBaseType": "MHB", "documentBaseName": "Member Handbook MHB", "documentClass": "u_emr_docs", "document": [{ "documentID": "0902b1fc800adf1d", "documentName": "ECA1560251", "effectiveDate": "2015-07-10T15:08:09.000Z", "expirationDate": "2015-07-10T15:08:09.000Z", "contentStreamMimeType": "PDF" }, { "documentID": "0902b1fc8008aa9b", "documentName": "ECA1560252", "effectiveDate": "2014-07-10T15:08:09.000Z", "expirationDate": "", "contentStreamMimeType": "Word" }, { "documentID": "0902b1fc8008aa9c", "documentName": "ECA1560253", "effectiveDate": "2015-07-10T15:08:09.000Z", "expirationDate": "2015-07-10T15:08:09.000Z", "contentStreamMimeType": "PDF" }, { "documentID": "0902b1fc8008aa9d", "documentName": "ECA1560254", "effectiveDate": "2014-08-10T15:08:09.000Z", "expirationDate": "", "contentStreamMimeType": "Word" }, { "documentID": "0902b1fc8008aa9e", "documentName": "ECA1560255", "effectiveDate": "2015-07-10T15:08:09.000Z", "expirationDate": "2015-09-10T15:08:09.000Z", "contentStreamMimeType": "PDF" }, { "documentID": "0902b1fc8008aa9b", "documentName": "ECA1560256", "effectiveDate": "2014-07-10T15:08:09.000Z", "expirationDate": "2015-07-10T15:08:09.000Z", "contentStreamMimeType": "Word" }, { "documentID": "0902b1fc8008aa9a", "documentName": "ECA1560257", "effectiveDate": "2014-07-10T15:08:09.000Z", "expirationDate": "2015-07-10T15:08:09.000Z", "contentStreamMimeType": "PDF" }, { "documentID": "0902b1fc8008aa9b", "documentName": "ECA1560258", "effectiveDate": "2014-07-10T15:08:09.000Z", "expirationDate": "2015-07-10T15:08:09.000Z", "contentStreamMimeType": "Word" }, { "documentID": "0902b1fc8008aa9a", "documentName": "ECA1560259", "effectiveDate": "2015-06-10T15:08:09.000Z", "expirationDate": "2016-06-10T15:08:09.000Z", "contentStreamMimeType": "PDF" }, { "documentID": "0902b1fc8008aa9b", "documentName": "ECA15602510", "effectiveDate": "2014-07-10T15:08:09.000Z", "expirationDate": "", "contentStreamMimeType": "Word" }, { "documentID": "0902b1fc8008aa9a", "documentName": "ECA15602511", "effectiveDate": "2015-07-10T15:08:09.000Z", "expirationDate": "2015-07-10T15:08:09.000Z", "contentStreamMimeType": "PDF" }, { "documentID": "0902b1fc8008aa9b", "documentName": "ECA15602512", "effectiveDate": "2014-07-10T15:08:09.000Z", "expirationDate": "", "contentStreamMimeType": "Word" }, { "documentID": "0902b1fc8008aa9a", "documentName": "ECA15602513", "effectiveDate": "2015-07-10T15:08:09.000Z", "expirationDate": "2015-07-10T15:08:09.000Z", "contentStreamMimeType": "PDF" }, { "documentID": "0902b1fc8008aa9b", "documentName": "ECA15602514", "effectiveDate": "2014-07-10T15:08:09.000Z", "expirationDate": "", "contentStreamMimeType": "Word" }, { "documentID": "0902b1fc8008aa9a", "documentName": "ECA15602515", "effectiveDate": "2015-07-10T15:08:09.000Z", "expirationDate": "2015-07-10T15:08:09.000Z", "contentStreamMimeType": "PDF" }, { "documentID": "0902b1fc8008aa9b", "documentName": "ECA15602516", "effectiveDate": "2014-07-10T15:08:09.000Z", "expirationDate": "", "contentStreamMimeType": "Word" }, { "documentID": "0902b1fc8008aa9a", "documentName": "ECA15602517", "effectiveDate": "2015-07-10T15:08:09.000Z", "expirationDate": "2015-07-10T15:08:09.000Z", "contentStreamMimeType": "PDF" }, { "documentID": "0902b1fc8008aa9b", "documentName": "ECA1560251", "effectiveDate": "2014-07-10T15:08:09.000Z", "expirationDate": "", "contentStreamMimeType": "Word" }, { "documentID": "0902b1fc8008aa9a", "documentName": "ECA15602518", "effectiveDate": "2015-07-10T15:08:09.000Z", "expirationDate": "2015-07-10T15:08:09.000Z", "contentStreamMimeType": "PDF" }, { "documentID": "0902b1fc8008aa9b", "documentName": "ECA15602519", "effectiveDate": "2014-07-10T15:08:09.000Z", "expirationDate": "", "contentStreamMimeType": "Word" }, { "documentID": "0902b1fc8008aa9a", "documentName": "ECA15602520", "effectiveDate": "2015-07-10T15:08:09.000Z", "expirationDate": "2015-07-10T15:08:09.000Z", "contentStreamMimeType": "PDF" }, { "documentID": "0902b1fc8008aa9b", "documentName": "ECA15602521", "effectiveDate": "2014-07-10T15:08:09.000Z", "expirationDate": "", "contentStreamMimeType": "Word" }] }, { "documentBaseType": "SBC", "documentBaseName": "Summary of Benefits & Coverage SBC", "documentClass": "u_emr_docs", "document": [{ "documentID": "0902b1fc8008aa9a", "documentName": "ECA1560251", "effectiveDate": "2015-07-10T15:08:09.000Z", "expirationDate": "2015-07-10T15:08:09.000Z", "contentStreamMimeType": "PDF" }, { "documentID": "0902b1fc8008aa9b", "documentName": "ECA1560252", "effectiveDate": "2014-07-10T15:08:09.000Z", "expirationDate": "", "contentStreamMimeType": "Word" }, { "documentID": "0902b1fc8008aa9c", "documentName": "ECA1560253", "effectiveDate": "2015-07-10T15:08:09.000Z", "expirationDate": "2015-07-10T15:08:09.000Z", "contentStreamMimeType": "PDF" }, { "documentID": "0902b1fc8008aa9d", "documentName": "ECA1560254", "effectiveDate": "2014-08-10T15:08:09.000Z", "expirationDate": "", "contentStreamMimeType": "Word" }, { "documentID": "0902b1fc8008aa9e", "documentName": "ECA1560255", "effectiveDate": "2015-07-10T15:08:09.000Z", "expirationDate": "2015-09-10T15:08:09.000Z", "contentStreamMimeType": "PDF" }, { "documentID": "0902b1fc8008aa9b", "documentName": "ECA1560256", "effectiveDate": "2014-07-10T15:08:09.000Z", "expirationDate": "2015-07-10T15:08:09.000Z", "contentStreamMimeType": "Word" }, { "documentID": "0902b1fc8008aa9a", "documentName": "ECA1560257", "effectiveDate": "2014-07-10T15:08:09.000Z", "expirationDate": "2015-07-10T15:08:09.000Z", "contentStreamMimeType": "PDF" }, { "documentID": "0902b1fc8008aa9b", "documentName": "ECA1560258", "effectiveDate": "2014-07-10T15:08:09.000Z", "expirationDate": "2015-07-10T15:08:09.000Z", "contentStreamMimeType": "Word" }, { "documentID": "0902b1fc8008aa9a", "documentName": "ECA1560259", "effectiveDate": "2015-06-10T15:08:09.000Z", "expirationDate": "2016-06-10T15:08:09.000Z", "contentStreamMimeType": "PDF" }, { "documentID": "0902b1fc8008aa9b", "documentName": "ECA15602510", "effectiveDate": "2014-07-10T15:08:09.000Z", "expirationDate": "", "contentStreamMimeType": "Word" }, { "documentID": "0902b1fc8008aa9a", "documentName": "ECA15602511", "effectiveDate": "2015-07-10T15:08:09.000Z", "expirationDate": "2015-07-10T15:08:09.000Z", "contentStreamMimeType": "PDF" }, { "documentID": "0902b1fc8008aa9b", "documentName": "ECA15602512", "effectiveDate": "2014-07-10T15:08:09.000Z", "expirationDate": "", "contentStreamMimeType": "Word" }, { "documentID": "0902b1fc8008aa9a", "documentName": "ECA15602513", "effectiveDate": "2015-07-10T15:08:09.000Z", "expirationDate": "2015-07-10T15:08:09.000Z", "contentStreamMimeType": "PDF" }, { "documentID": "0902b1fc8008aa9b", "documentName": "ECA15602514", "effectiveDate": "2014-07-10T15:08:09.000Z", "expirationDate": "", "contentStreamMimeType": "Word" }, { "documentID": "0902b1fc8008aa9a", "documentName": "ECA15602515", "effectiveDate": "2015-07-10T15:08:09.000Z", "expirationDate": "2015-07-10T15:08:09.000Z", "contentStreamMimeType": "PDF" }, { "documentID": "0902b1fc8008aa9b", "documentName": "ECA15602516", "effectiveDate": "2014-07-10T15:08:09.000Z", "expirationDate": "", "contentStreamMimeType": "Word" }, { "documentID": "0902b1fc8008aa9a", "documentName": "ECA15602517", "effectiveDate": "2015-07-10T15:08:09.000Z", "expirationDate": "2015-07-10T15:08:09.000Z", "contentStreamMimeType": "PDF" }, { "documentID": "0902b1fc8008aa9b", "documentName": "ECA1560251", "effectiveDate": "2014-07-10T15:08:09.000Z", "expirationDate": "", "contentStreamMimeType": "Word" }, { "documentID": "0902b1fc8008aa9a", "documentName": "ECA15602518", "effectiveDate": "2015-07-10T15:08:09.000Z", "expirationDate": "2015-07-10T15:08:09.000Z", "contentStreamMimeType": "PDF" }, { "documentID": "0902b1fc8008aa9b", "documentName": "ECA15602519", "effectiveDate": "2014-07-10T15:08:09.000Z", "expirationDate": "", "contentStreamMimeType": "Word" }, { "documentID": "0902b1fc8008aa9a", "documentName": "ECA15602520", "effectiveDate": "2015-07-10T15:08:09.000Z", "expirationDate": "2015-07-10T15:08:09.000Z", "contentStreamMimeType": "PDF" }, { "documentID": "0902b1fc8008aa9b", "documentName": "ECA15602521", "effectiveDate": "2014-07-10T15:08:09.000Z", "expirationDate": "", "contentStreamMimeType": "Word" }] }, { "documentBaseType": "SPD", "documentBaseName": "Summary plan Document SPD", "documentClass": "u_emr_docs", "document": [{ "documentID": "0902b1fc8008aa9a", "documentName": "ECA1560251", "effectiveDate": "2015-07-10T15:08:09.000Z", "expirationDate": "2015-07-10T15:08:09.000Z", "contentStreamMimeType": "PDF" }, { "documentID": "0902b1fc8008aa9b", "documentName": "ECA1560252", "effectiveDate": "2014-07-10T15:08:09.000Z", "expirationDate": "", "contentStreamMimeType": "Word" }, { "documentID": "0902b1fc8008aa9c", "documentName": "ECA1560253", "effectiveDate": "2015-07-10T15:08:09.000Z", "expirationDate": "2015-07-10T15:08:09.000Z", "contentStreamMimeType": "PDF" }, { "documentID": "0902b1fc8008aa9d", "documentName": "ECA1560254", "effectiveDate": "2014-08-10T15:08:09.000Z", "expirationDate": "", "contentStreamMimeType": "Word" }, { "documentID": "0902b1fc8008aa9e", "documentName": "ECA1560255", "effectiveDate": "2015-07-10T15:08:09.000Z", "expirationDate": "2015-09-10T15:08:09.000Z", "contentStreamMimeType": "PDF" }, { "documentID": "0902b1fc8008aa9b", "documentName": "ECA1560256", "effectiveDate": "2014-07-10T15:08:09.000Z", "expirationDate": "2015-07-10T15:08:09.000Z", "contentStreamMimeType": "Word" }, { "documentID": "0902b1fc8008aa9a", "documentName": "ECA1560257", "effectiveDate": "2014-07-10T15:08:09.000Z", "expirationDate": "2015-07-10T15:08:09.000Z", "contentStreamMimeType": "PDF" }, { "documentID": "0902b1fc8008aa9b", "documentName": "ECA1560258", "effectiveDate": "2014-07-10T15:08:09.000Z", "expirationDate": "2015-07-10T15:08:09.000Z", "contentStreamMimeType": "Word" }, { "documentID": "0902b1fc8008aa9a", "documentName": "ECA1560259", "effectiveDate": "2015-06-10T15:08:09.000Z", "expirationDate": "2016-06-10T15:08:09.000Z", "contentStreamMimeType": "PDF" }, { "documentID": "0902b1fc8008aa9b", "documentName": "ECA15602510", "effectiveDate": "2014-07-10T15:08:09.000Z", "expirationDate": "", "contentStreamMimeType": "Word" }, { "documentID": "0902b1fc8008aa9a", "documentName": "ECA15602511", "effectiveDate": "2015-07-10T15:08:09.000Z", "expirationDate": "2015-07-10T15:08:09.000Z", "contentStreamMimeType": "PDF" }, { "documentID": "0902b1fc8008aa9b", "documentName": "ECA15602512", "effectiveDate": "2014-07-10T15:08:09.000Z", "expirationDate": "", "contentStreamMimeType": "Word" }, { "documentID": "0902b1fc8008aa9a", "documentName": "ECA15602513", "effectiveDate": "2015-07-10T15:08:09.000Z", "expirationDate": "2015-07-10T15:08:09.000Z", "contentStreamMimeType": "PDF" }, { "documentID": "0902b1fc8008aa9b", "documentName": "ECA15602514", "effectiveDate": "2014-07-10T15:08:09.000Z", "expirationDate": "", "contentStreamMimeType": "Word" }, { "documentID": "0902b1fc8008aa9a", "documentName": "ECA15602515", "effectiveDate": "2015-07-10T15:08:09.000Z", "expirationDate": "2015-07-10T15:08:09.000Z", "contentStreamMimeType": "PDF" }, { "documentID": "0902b1fc8008aa9b", "documentName": "ECA15602516", "effectiveDate": "2014-07-10T15:08:09.000Z", "expirationDate": "", "contentStreamMimeType": "Word" }, { "documentID": "0902b1fc8008aa9a", "documentName": "ECA15602517", "effectiveDate": "2015-07-10T15:08:09.000Z", "expirationDate": "2015-07-10T15:08:09.000Z", "contentStreamMimeType": "PDF" }, { "documentID": "0902b1fc8008aa9b", "documentName": "ECA1560251", "effectiveDate": "2014-07-10T15:08:09.000Z", "expirationDate": "", "contentStreamMimeType": "Word" }, { "documentID": "0902b1fc8008aa9a", "documentName": "ECA15602518", "effectiveDate": "2015-07-10T15:08:09.000Z", "expirationDate": "2015-07-10T15:08:09.000Z", "contentStreamMimeType": "PDF" }, { "documentID": "0902b1fc8008aa9b", "documentName": "ECA15602519", "effectiveDate": "2014-07-10T15:08:09.000Z", "expirationDate": "", "contentStreamMimeType": "Word" }, { "documentID": "0902b1fc8008aa9a", "documentName": "ECA15602520", "effectiveDate": "2015-07-10T15:08:09.000Z", "expirationDate": "2015-07-10T15:08:09.000Z", "contentStreamMimeType": "PDF" }, { "documentID": "0902b1fc8008aa9b", "documentName": "ECA15602521", "effectiveDate": "2014-07-10T15:08:09.000Z", "expirationDate": "", "contentStreamMimeType": "Word" }] }, { "documentBaseType": "SOB", "documentBaseName": "Summary of Benefits SOB", "documentClass": "u_emr_docs", "document": [{ "documentID": "0902b1fc8008aa9a", "documentName": "ECA1560251", "effectiveDate": "2015-07-10T15:08:09.000Z", "expirationDate": "2015-07-10T15:08:09.000Z", "contentStreamMimeType": "PDF" }, { "documentID": "0902b1fc8008aa9b", "documentName": "ECA1560252", "effectiveDate": "2014-07-10T15:08:09.000Z", "expirationDate": "", "contentStreamMimeType": "Word" }, { "documentID": "0902b1fc8008aa9c", "documentName": "ECA1560253", "effectiveDate": "2015-07-10T15:08:09.000Z", "expirationDate": "2015-07-10T15:08:09.000Z", "contentStreamMimeType": "PDF" }, { "documentID": "0902b1fc8008aa9d", "documentName": "ECA1560254", "effectiveDate": "2014-08-10T15:08:09.000Z", "expirationDate": "", "contentStreamMimeType": "Word" }, { "documentID": "0902b1fc8008aa9e", "documentName": "ECA1560255", "effectiveDate": "2015-07-10T15:08:09.000Z", "expirationDate": "2015-09-10T15:08:09.000Z", "contentStreamMimeType": "PDF" }, { "documentID": "0902b1fc8008aa9b", "documentName": "ECA1560256", "effectiveDate": "2014-07-10T15:08:09.000Z", "expirationDate": "2015-07-10T15:08:09.000Z", "contentStreamMimeType": "Word" }, { "documentID": "0902b1fc8008aa9a", "documentName": "ECA1560257", "effectiveDate": "2014-07-10T15:08:09.000Z", "expirationDate": "2015-07-10T15:08:09.000Z", "contentStreamMimeType": "PDF" }, { "documentID": "0902b1fc8008aa9b", "documentName": "ECA1560258", "effectiveDate": "2014-07-10T15:08:09.000Z", "expirationDate": "2015-07-10T15:08:09.000Z", "contentStreamMimeType": "Word" }, { "documentID": "0902b1fc8008aa9a", "documentName": "ECA1560259", "effectiveDate": "2015-06-10T15:08:09.000Z", "expirationDate": "2016-06-10T15:08:09.000Z", "contentStreamMimeType": "PDF" }, { "documentID": "0902b1fc8008aa9b", "documentName": "ECA15602510", "effectiveDate": "2014-07-10T15:08:09.000Z", "expirationDate": "", "contentStreamMimeType": "Word" }, { "documentID": "0902b1fc8008aa9a", "documentName": "ECA15602511", "effectiveDate": "2015-07-10T15:08:09.000Z", "expirationDate": "2015-07-10T15:08:09.000Z", "contentStreamMimeType": "PDF" }, { "documentID": "0902b1fc8008aa9b", "documentName": "ECA15602512", "effectiveDate": "2014-07-10T15:08:09.000Z", "expirationDate": "", "contentStreamMimeType": "Word" }, { "documentID": "0902b1fc8008aa9a", "documentName": "ECA15602513", "effectiveDate": "2015-07-10T15:08:09.000Z", "expirationDate": "2015-07-10T15:08:09.000Z", "contentStreamMimeType": "PDF" }, { "documentID": "0902b1fc8008aa9b", "documentName": "ECA15602514", "effectiveDate": "2014-07-10T15:08:09.000Z", "expirationDate": "", "contentStreamMimeType": "Word" }, { "documentID": "0902b1fc8008aa9a", "documentName": "ECA15602515", "effectiveDate": "2015-07-10T15:08:09.000Z", "expirationDate": "2015-07-10T15:08:09.000Z", "contentStreamMimeType": "PDF" }, { "documentID": "0902b1fc8008aa9b", "documentName": "ECA15602516", "effectiveDate": "2014-07-10T15:08:09.000Z", "expirationDate": "", "contentStreamMimeType": "Word" }, { "documentID": "0902b1fc8008aa9a", "documentName": "ECA15602517", "effectiveDate": "2015-07-10T15:08:09.000Z", "expirationDate": "2015-07-10T15:08:09.000Z", "contentStreamMimeType": "PDF" }, { "documentID": "0902b1fc8008aa9b", "documentName": "ECA1560251", "effectiveDate": "2014-07-10T15:08:09.000Z", "expirationDate": "", "contentStreamMimeType": "Word" }, { "documentID": "0902b1fc8008aa9a", "documentName": "ECA15602518", "effectiveDate": "2015-07-10T15:08:09.000Z", "expirationDate": "2015-07-10T15:08:09.000Z", "contentStreamMimeType": "PDF" }, { "documentID": "0902b1fc8008aa9b", "documentName": "ECA15602519", "effectiveDate": "2014-07-10T15:08:09.000Z", "expirationDate": "", "contentStreamMimeType": "Word" }, { "documentID": "0902b1fc8008aa9a", "documentName": "ECA15602520", "effectiveDate": "2015-07-10T15:08:09.000Z", "expirationDate": "2015-07-10T15:08:09.000Z", "contentStreamMimeType": "PDF" }, { "documentID": "0902b1fc8008aa9b", "documentName": "ECA15602521", "effectiveDate": "2014-07-10T15:08:09.000Z", "expirationDate": "", "contentStreamMimeType": "Word" }] }] };
        angular.forEach(quickLinksDocData.documentList, function(document) {
            if (document.documentBaseType === selectedDocType) {
                angular.forEach(document.document, function(docData) {
                    if (!(angular.isUndefined(docData.effectiveDate) || docData.effectiveDate == ''))
                        docData.effectiveDate = $filter('date')(new Date(docData.effectiveDate), 'MMM-dd-yyyy');
                    if (!(angular.isUndefined(docData.expirationDate) || docData.expirationDate == ''))
                        docData.expirationDate = $filter('date')(new Date(docData.expirationDate), 'MMM-dd-yyyy');
                });

                finalDocList.push(document);

            }
        });
        $scope.documentDetails = finalDocList[0];
    }
    $scope.docSubmit = function(doc) {
        var getDocServName = "getDocument";
        var documentContract = {
            "documentID": ""
        };
        documentContract = angular.extend(documentContract, doc);
        var endPoint = getDocServName + '?id=' + documentContract.documentID;
        serverGetReqSrv.send("getDocument").then(function(d) {
            console.log(d.data);
            var link = document.createElement('a');
            link.href = window.URL.createObjectURL(blob);
            link.click();
            console.log('link clicked');
            // $window.open('/getDocument', '_blank');
            // $scope.closeModal();
        }).catch(function(err) {
            console.log(err);
        });
    }

    function getQuickLinksData() {
        var QuickLinksReqName = "quicklinks/getQuickLinks";
        TimerService.init();
        serverGetReqSrv.send(QuickLinksReqName).then(function(d) {
            TimerService.log('Get Quick Links Response got in');
            $scope.form = d.data;
            $scope.resQuickLinks = d.data.Links;
            $scope.restObj = angular.copy($scope.form);

        }).catch(function(err) {
            // Need to handle exceptions
        });
    };

    function UpdateQuickLinksData(restObj) {
        var QuickLinksUpdateReqName = "quicklinks/postQuickLinks";
        var reqObj = angular.copy(restObj);
        TimerService.init();
        serverPostReqSrv.send(QuickLinksUpdateReqName, reqObj).async().then(function(d) {
            TimerService.log('Language Response got in');
            // logic to check for errors
            console.log('updated links ' + JSON.stringify(d.data));

        }); // end serverPostReq
    };

    $scope.addFields = function(form) {
        if (typeof form.links == 'undefined') {
            form.links = [];
        }
        form.links.push({
            title: '',
            url: '',
            id: true
        });
    };

    $scope.deleteRow = function(i) {
        $scope.form.links.splice(i, 1);
    };

    $scope.submit = function(form) {
        for (var j = 0; j < $scope.form.links.length; j++) {
            $scope.form.links[j].id = false;
            if ($scope.form.links[j].title == "" && $scope.form.links[j].url == "") {
                scope.form.links.splice(j, 1);
                j--;
            }

        }
        $scope.restObj = angular.copy($scope.form);
        $scope.resQuickLinks = $scope.restObj;
        UpdateQuickLinksData($scope.restObj);
    };

    $scope.Cancel = function() {
        $scope.form = angular.copy($scope.restObj);
    };

};

/************************************************/
/************ Sliding Directive ***********/
/************************************************/


angular.module("masterApp").directive('slideToggle', function() {
    return {
        restrict: 'AE',
        scope: {
            isOpen: "=slideToggle"
        },
        link: function(scope, element, attr) {
            var slideDuration = parseInt(attr.slideToggleDuration, 10) || 250;
            scope.$watch('isOpen', function(newVal, oldVal) {
                if (newVal !== oldVal) {
                    element.stop().slideToggle(slideDuration);
                }
            });
        }
    };
});

angular.module('masterApp').service('serverPostReqSrv', serverPostReqSrv);
serverPostReqSrv.$inject = ['$http', '$q', '$rootScope'];

function serverPostReqSrv($http, $q, $rootScope) {
    // var loginFirstName = document.getElementById('loginFirstName').value;
    // var loginLastName = document.getElementById('loginLastName').value;
    // console.log('rrrr ' + $rootScope.userInfo);
    // console.log(loginFirstName + loginLastName);
    var service = {};
    service.send = function(serviceType, jsonReq) {
        if ($rootScope.userInfo) {
            var loginFirstName = $rootScope.userInfo.firstName;
            var loginLastName = $rootScope.userInfo.lastName;
            var loginMsId = $rootScope.userInfo.msid;
            var memberId = $rootScope.userInfo.memberId;
            var groupId = $rootScope.userInfo.groupId;
        }

        var config = {
            headers: {
                'Content-Type': 'application/json',
                'firstname': loginFirstName,
                'lastName': loginLastName,
                'msId': loginMsId,
                'memberId': memberId,
                'groupId': groupId
            }
        }
        return {
            async: function() {
                return $http.post('/' + serviceType, jsonReq, config).then(function(response) {
                  return response.data;
                }, function(errResponse) {
                  // if(errResponse.status == -1){
                          //   console.log('Hi');  // window.location.reload();
                          //   window.open("http://google.com", "_blank"); // window.location.reload();
                          // }
                  console.error('Error while calling BEACH service');
                  return $q.reject(errResponse);
                });
            }
        };
    }
    return service;
}

angular.module('masterApp').service('serverGetReqSrv', serverGetReqSrv);
serverGetReqSrv.$inject = ['$http', '$q'];

function serverGetReqSrv($http, $q) {
    var service = {};

    service.send = function(serviceType) {
        var config = {
            headers: {
                'Content-Type': 'application/json'
            }
        }

        return {
            async: function() {
                return $http.get('/' + serviceType, config).then(function(response) {
                    return response.data;
                }, function(errResponse) {
                    console.error('Error while calling BEACH service');
                    return $q.reject(errResponse);
                });
            }
        }
    }
    return service;

}

angular.module('masterApp').factory('TimerService', TimerService);

TimerService.$inject = ['$log'];

function TimerService($log) {
    var start = new Date();
    var service = {};

    service.init = function() {
        start = new Date();
    }
    service.log = function(msg) {
        var diff = ((new Date()).getTime() - start.getTime()) / 1000
        $log.log(msg, ':', diff, 'seconds')
    }
    return service;
};

// angular.module('masterApp').factory('AppConfigService', AppConfigService);

// AppConfigService.$inject = ['$http'];

// function AppConfigService($http) {
//     var constants = {};

//     var service = {};

//     service.init = function() {
//         var promise = $http({
//             method: 'GET',
//             url: '/config/constants.json'
//         });
//         promise.success(function(data, status, headers, conf) {
//             constants = data.constants
//         });
//         return promise;
//     }

//     service.get = function(configName) {
//         return constants[configName];
//     }

//     return service;
// }

/**
 * Created by hnarasap on 4/14/2017.
 */

angular.module('masterApp')
    .constant('US_STATES', {
        "usState": [
            { "id": '', "name": '---- Select state ----' },
            { "id": 'AL', "name": 'AL - Alabama' },
            { "id": 'AK', "name": 'AK - Alaska' },
            { "id": 'AZ', "name": 'AZ - Arizona' },
            { "id": 'AR', "name": 'AR - Arkansas' },
            { "id": 'CA', "name": 'CA - California' },
            { "id": 'CO', "name": 'CO - Colorado' },
            { "id": 'CT', "name": 'CT - Connecticut' },
            { "id": 'DE', "name": 'DE - Delaware' },
            { "id": 'DC', "name": 'DC - District Of Columbia' },
            { "id": 'FL', "name": 'FL - Florida' },
            { "id": 'GA', "name": 'GA - Georgia' },
            { "id": 'HI', "name": 'HI - Hawaii' },
            { "id": 'ID', "name": 'ID - Idaho' },
            { "id": 'IL', "name": 'IL - Illinois' },
            { "id": 'IN', "name": 'IN - Indiana' },
            { "id": 'IA', "name": 'IA - Iowa' },
            { "id": 'KS', "name": 'KS - Kansas' },
            { "id": 'KY', "name": 'KY - Kentucky' },
            { "id": 'LA', "name": 'LA - Louisiana' },
            { "id": 'ME', "name": 'ME - Maine' },
            { "id": 'MD', "name": 'MD - Maryland' },
            { "id": 'MA', "name": 'MA - Massachusetts' },
            { "id": 'MI', "name": 'MI - Michigan' },
            { "id": 'MN', "name": 'MN - Minnesota' },
            { "id": 'MS', "name": 'MS - Mississippi' },
            { "id": 'MO', "name": 'MO - Missouri' },
            { "id": 'MT', "name": 'MT - Montana' },
            { "id": 'NE', "name": 'NE - Nebraska' },
            { "id": 'NV', "name": 'NV - Nevada' },
            { "id": 'NH', "name": 'NH - New Hampshire' },
            { "id": 'NJ', "name": 'NJ - New Jersey' },
            { "id": 'NM', "name": 'NM - New Mexico' },
            { "id": 'NY', "name": 'NY - New York' },
            { "id": 'NC', "name": 'NC - North Carolina' },
            { "id": 'ND', "name": 'ND - North Dakota' },
            { "id": 'OH', "name": 'OH - Ohio' },
            { "id": 'OK', "name": 'OK - Oklahoma' },
            { "id": 'OR', "name": 'OR - Oregon' },
            { "id": 'PA', "name": 'PA - Pennsylvania' },
            { "id": 'RI', "name": 'RI - Rhode Island' },
            { "id": 'SC', "name": 'SC - South Carolina' },
            { "id": 'SD', "name": 'SD - South Dakota' },
            { "id": 'TN', "name": 'TN - Tennessee' },
            { "id": 'TX', "name": 'TX - Texas' },
            { "id": 'UT', "name": 'UT - Utah' },
            { "id": 'VT', "name": 'VT - Vermont' },
            { "id": 'VA', "name": 'VA - Virginia' },
            { "id": 'WA', "name": 'WA - Washington' },
            { "id": 'WV', "name": 'WV - West Virginia' },
            { "id": 'WI', "name": 'WI - Wisconsin' },
            { "id": 'WY', "name": 'WY - Wyoming' }
        ]
    })

.constant('ERROR_MESSAGE', {
    "formErrorMsg": "Your entries are not completed or need to be changed. The information provided does not match our records. Please try again.",
    "findIndividual": {
        400: "Member Not Found based on your input criteria.",
        404: "Member Not Found based on your input criteria.",
        500: "Benefit Search Service is temporarily down. Please try again in a few minutes. If the issue persists, please open a problem ticket with the Help Desk at 888-848-3375. Thank you.",
    },
    "findMembership": {
        400: "Member found, however Coverage Information is not available in system for the selected coverage period.",
        404: "Member found, however Coverage Information is not available in system for the selected coverage period.",
        500: "Member found, however Coverage Information is not currently available in system. Please try again in a few minutes. If the issue persists, please open a problem ticket with the Help Desk at 888-848-3375. Thank you."
    },
    "getMembership": {
        400: "Membership not found based on your input criteria.  Please try your search again with valid criteria",
        404: "Membership not found based on your input criteria.  Please try your search again with valid criteria",
        500: "Member found, however Benefit Information is not currently available in system. Please try again in a few minutes. If the issue persists, please open a problem ticket with the Help Desk at 888-848-3375. Thank you."
    },
    "getSubscriptionServiceBenefit": {
        400: "Subscription information not found based on your search criteria. Please try your search again with valid criteria",
        404: "Subscription information not found based on your search criteria. Please try your search again with valid criteria",
        500: "Service is down, Riders information is currently not available. Please try your search again in a few minutes. If problem persists, please open a problem ticket with the Help Desk at 888-848-3375. Thank you."
    },
    "getMemberFamily": {
        400: "Family Members information not found based on your search criteria. Please try your search again with valid criteria",
        404: "Family Members information not found based on your search criteria. Please try your search again with valid criteria",
        500: "Service is down, Family Members information are currently not available. Please try your search again in a few minutes. If problem persists, please open a problem ticket with the Help Desk at 888-848-3375. Thank you."
    },
    "getBenefitLanguage": {
        400: "Benefit Language information not found based on your input criteria. Please try your search again with valid criteria",
        404: "Benefit Language information not found based on your input criteria. Please try your search again with valid criteria",
        500: "Service is down, Benefit Language information is currently not available. Please try your search again in a few minutes. If problem persists, please open a problem ticket with the Help Desk at 888-848-3375. Thank you."
    },
    "getBenefitAccumulator": {
        400: "Benefit Accumulator information not found based on your input criteria. Please try your search again with valid criteria",
        404: "Annual Amount Applied & Amount Remaining information not found based on your search criteria.  Please try your search again with valid criteria",
        500: "Service is down, Annual Amount Applied & Amount Remaining information is currently not available. Please try your search again in a few minutes. If problem persists, please open a problem ticket with the Help Desk at 888-848-3375. Thank you."
    },
    "quicklinks": {
        500: "Benefit Search Service is temporarily down. Please try again in a few minutes. If the issue persists, please open a problem ticket with the Help Desk at 888-848-3375. Thank you."
    },
    "findDocument": {
        400: "Documents not found. Please try your search again with valid criteria",
        404: "Documents not found. Please try your search again with valid criteria",
        500: "Benefit Search Service is temporarily down. Please try again in a few minutes. If the issue persists, please open a problem ticket with the Help Desk at 888-848-3375. Thank you."
    },
    "getDocument": {
        400: "Documents not found. Please try your search again with valid criteria",
        404: "Documents not found. Please try your search again with valid criteria",
        500: "Download is not available at this time. Please try again later."
    },
    "findEmployerGroup": {
        400: "Employer information not found based on your search criteria. Please try your search again with valid criteria",
        404: "Employer information not found based on your search criteria. Please try your search again with valid criteria",
        500: "Service is Down, Employer Information is not currently available. Please try your search again in a few minutes. If problem persists, please open a problem ticket with the Help Desk at 888-848-3375. Thank you."
    },
    "getEmployerGroup": {
        400: "Group information not found based on your search criteria.  Please try your search again with valid criteria",
        404: "Group information not found based on your search criteria.  Please try your search again with valid criteria",
        500: "Service is Down, Group Information is not currently available. Please try your search again in a few minutes. If problem persists, please open a problem ticket with the Help Desk at 888-848-3375. Thank you"
    },
    "moreResult": "Your search resulted in many results. Please narrow down your search criteria."


});
